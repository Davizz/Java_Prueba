package F21;

import javax.swing.JOptionPane;



public class Funciones {
	
	/* Ejercicio F21_1 ‚Äì Permutaci√≥n del contenido de 2 variables
		Operadores y expresiones. 
		Implementar un algoritmo que te permite permutar los valores de 2 variables. 
	 */
	public void F21_1() {
		double inicio = System.nanoTime(); //Tiempo de Ejecuci√≥n inicio
		
		String elementos[] = new String[4]; //4 elementos
		double a,b;
		a = elementos.length;
		b = 2; // 2 variables
		//formula = aPb = a!/(a-b)! ==> [! = factorial]
		//          4P2 = 4!/(4-2)! ==> 4!/2! ==> (4*3*2*1)/(2*1) = 12
		double aF = factorial(a);
		double abF = factorial(a-b);
		
		double resultado = aF /abF;
		
		double fin = System.nanoTime(); //Tiempo de Ejecuci√≥n inicio
		double tiempo = (fin-inicio)/1000000; 
		
		//No reconoce la opciÛn FORMATOS
//		JOptionPane.showMessageDialog(null, "Permutaciones = " + formatos.Formatos.conDecimales(resultado,2) +
//									        "\n\n Tiempo de Ejecuci√≥n = " + formatos.Formatos.conDecimales(tiempo,4) + " MiliSegundos.", "Resultado", JOptionPane.PLAIN_MESSAGE);
	}
	
	public static double factorial(double n) {
		//factorial con recursividad
		return (n==0)?1:n*factorial(n-1);
	}
	
	
	
	/*  Ejercicio F21_2 ‚Äì Clase Animal
	 * 
		Primera parte: 
		Crear una clase Animal sin el m√©todo main con las propiedades privadas nombre, esperanzaDeVidaMax y edad.
		Crear un constructor de la superclase recibiendo todos los par√°metros por par√°metro.  
		A√±adirle los m√©todos GETTER y SETTER adecuados. 
		Pisar el m√©todo toString y hacer que contenga cada uno de los m√©todos GETTER. 
		
		Segunda parte: 
		A continuaci√≥n, crear dos clases Mam√≠fero y Ave que hereda de la clase Animales. 
		La clase mam√≠fero tendr√° la propiedad booleana tienePelo. 
		La clase Ave tendr√° la propiedad booleana puedeVolar. 
		Crear un constructor de la subclase recibiendo todos los par√°metros por par√°metro.  
		Crear otro constructor de la subclase con la propiedad propia inicializada a true.  
		A√±adirle m√©todos GETTER y SETTER adecuados. 
		Cada clase tiene su m√©todo toString propio. Este m√©todo debe imprimir la informaci√≥n que tenemos acerca de la superclase. 
		En el toString o en el m√©todo getEsperanzaDeVida(), indicar que este animal es muy viejo si su edad es superior 
		a la esperanza de vida. En caso contrario, indicar que el animal puede vivir un n√∫mero de a√±os igual al c√°lculo de 
		(esperanzadeVida ‚Äì edad) a√±os. 
		
		Tercera parte:
		Crear un m√©todo main desde d√≥nde crear√°s 1 delf√≠n salvaje, 1 perro callejero, 1 ping√ºino de Madagascar y 1 cig√ºe√±a de Estrasburgo.  
		Imprimir en pantalla los resultados de cada instancia. 
	 */
	public void F21_2() {
		Mamifero delfin = new Mamifero("Delf√≠n Salvaje", 10, 11);
		JOptionPane.showMessageDialog(null, delfin.toString(), "Resultado", JOptionPane.PLAIN_MESSAGE);
		
		Mamifero perro = new Mamifero("Perro Callejero", 5, 2);
		JOptionPane.showMessageDialog(null, perro.toString(), "Resultado", JOptionPane.PLAIN_MESSAGE);
		
		Mamifero pinguino = new Mamifero("Ping√ºino de Madagascar", 10, 6);
		JOptionPane.showMessageDialog(null, pinguino.toString(), "Resultado", JOptionPane.PLAIN_MESSAGE);
		
		Ave ciguena = new Ave("Cig√ºe√±a de Estrasburgo", 7, 8);
		JOptionPane.showMessageDialog(null, ciguena.toString(), "Resultado", JOptionPane.PLAIN_MESSAGE);
	}
	
}
